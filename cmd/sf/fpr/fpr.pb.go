// Code generated by protoc-gen-go.
// source: fpr.proto
// DO NOT EDIT!

/*
Package fpr is a generated protocol buffer package.

It is generated from these files:
	fpr.proto

It has these top-level messages:
	Request
	Reply
*/
package fpr

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Request struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

type Reply struct {
	Puid  string `protobuf:"bytes,1,opt,name=puid" json:"puid,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}

func init() {
}

// Client API for Fpr service

type FprClient interface {
	Identify(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type fprClient struct {
	cc *grpc.ClientConn
}

func NewFprClient(cc *grpc.ClientConn) FprClient {
	return &fprClient{cc}
}

func (c *fprClient) Identify(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/fpr.Fpr/Identify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Fpr service

type FprServer interface {
	Identify(context.Context, *Request) (*Reply, error)
}

func RegisterFprServer(s *grpc.Server, srv FprServer) {
	s.RegisterService(&_Fpr_serviceDesc, srv)
}

func _Fpr_Identify_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Request)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(FprServer).Identify(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Fpr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fpr.Fpr",
	HandlerType: (*FprServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Identify",
			Handler:    _Fpr_Identify_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
